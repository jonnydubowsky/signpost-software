/*
 * Generated by erpcgen 1.3.0 on Tue Nov 22 18:09:25 2016.
 *
 * AUTOGENERATED - DO NOT EDIT
 */

#include "test_arithmetic.h"
#include "client_manager.h"
#include "erpc_port.h"
#include "stdio.h"
#include "console.h"

using namespace erpc;
#if !(__embedded_cplusplus)
using namespace std;
#endif

extern ClientManager *g_client;


// Arithmetic interface add function client shim.
float add(float a, float b)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();
    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    if (!err)
    {
        err = codec->startWriteMessage(kInvocationMessage, kArithmetic_service_id, kArithmetic_add_id, request.getSequence());
    }

    if (!err)
    {
        err = codec->write(a);
    }


    if (!err)
    {
        err = codec->write(b);
    }


    if (!err)
    {
        err = codec->endWriteMessage();
    }


    // Send message to server
    if (!err)
    {
        err = g_client->performRequest(request);
    }



    float result;
    if (!err)
    {
        err = codec->read(&result);
    }

    if (!err)
    {
        err = codec->endReadMessage();
    }



    // Dispose of the request.
    g_client->releaseRequest(request);

    if (err)
    {
        ClientManager::error_handler_t errorHandler = g_client->getErrorHandler();
        if (errorHandler != NULL)
        {
            (*errorHandler)(err);
        }
        return -1;
    }

    return result;
}

// Arithmetic interface sub function client shim.
float sub(float a, float b)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();
    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    if (!err)
    {
        err = codec->startWriteMessage(kInvocationMessage, kArithmetic_service_id, kArithmetic_sub_id, request.getSequence());
    }

    if (!err)
    {
        err = codec->write(a);
    }


    if (!err)
    {
        err = codec->write(b);
    }


    if (!err)
    {
        err = codec->endWriteMessage();
    }


    // Send message to server
    if (!err)
    {
        err = g_client->performRequest(request);
    }



    float result;
    if (!err)
    {
        err = codec->read(&result);
    }

    if (!err)
    {
        err = codec->endReadMessage();
    }



    // Dispose of the request.
    g_client->releaseRequest(request);

    if (err)
    {
        ClientManager::error_handler_t errorHandler = g_client->getErrorHandler();
        if (errorHandler != NULL)
        {
            (*errorHandler)(err);
        }
        return -1;
    }

    return result;
}
